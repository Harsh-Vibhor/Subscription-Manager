name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: subscriptionmanager_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm run install:all
    
    - name: Create test environment file
      run: |
        cd backend
        cp .env.example .env
        echo "DB_PASSWORD=testpassword" >> .env
        echo "DB_NAME=subscriptionmanager_test" >> .env
    
    - name: Run backend tests
      run: npm run test:backend
      env:
        NODE_ENV: test
    
    - name: Run frontend tests
      run: npm run test:frontend
    
    - name: Run linting
      run: npm run lint
    
    - name: Build frontend
      run: npm run build:frontend

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm run install:all
    
    - name: Build application
      run: npm run build
    
    - name: Deploy to production
      run: echo "Deploy to your preferred hosting platform"
      # Add your deployment steps here
